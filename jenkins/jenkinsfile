pipeline {
    agent any
    tools{
        terraform 'terraform'
    }
    environment {
        AWS_DEFAULT_REGION="eu-north-1"
        THE_BUTLER_SAY_SO=credentials('aws-credentials')
    }
    stages {
        stage('terraform apply ') {
            steps {
                script{
                     sh """
                     pwd; \
                     terraform init; \
                     terraform apply --auto-approve
                     """
                }
            }
        }
        stage('Take public IP, db url and all sed commands') {
            steps {
                script{
                  withCredentials([string(credentialsId: 'postgres_user_pass', variable: 'POSTGRES_USER_PASS'), string(credentialsId: 'email_password', variable: 'EMAIL_PASSWORD')]) {
                      sh """
                     aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query Reservations[0].Instances[0].NetworkInterfaces[0].PrivateIpAddresses[0].Association.PublicIp > publicip1.txt; \
                     aws ec2 describe-instances --filters Name=instance-state-name,Values=running --query Reservations[1].Instances[0].NetworkInterfaces[0].PrivateIpAddresses[0].Association.PublicIp > publicip2.txt; \
                     aws rds describe-db-instances --query DBInstances[0].Endpoint.Address > output.txt; \
                     export PUBLIC_IP1=\$(cut -d '"' -f 2 publicip1.txt); \
                     export PUBLIC_IP2=\$(cut -d '"' -f 2 publicip2.txt); \
                     export DB_URL=\$(cut -d '"' -f 2 output.txt); \
                     sed -i "s/postusername/\$POSTGRES_USER_PASS/g" /var/lib/jenkins/workspace/Geocit/src/main/resources/application.properties; \
                     sed -i "s/postpassword/\$POSTGRES_USER_PASS/g" /var/lib/jenkins/workspace/Geocit/src/main/resources/application.properties; \
                     sed -i "s/localhost:5432/\$DB_URL:5432/g" /var/lib/jenkins/workspace/Geocit/src/main/resources/application.properties; \
                     sed -i "s/passwordemail/\$EMAIL_PASSWORD/g" /var/lib/jenkins/workspace/Geocit/src/main/resources/application.properties; \
                     sed -i "s/server1/\$PUBLIC_IP1/g" /var/lib/jenkins/workspace/Geocit/ansible/hosts.txt; \
                     sed -i "s/server2/\$PUBLIC_IP2/g" /var/lib/jenkins/workspace/Geocit/ansible/hosts.txt; \
                     cat /var/lib/jenkins/workspace/Geocit/ansible/hosts.txt; \
                     cat /var/lib/jenkins/workspace/Geocit/src/main/resources/application.properties
                     """
                      }
                }
            }
        }
        stage('build') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                      sh "mvn clean install"
                    }
                }
            }
        }
        stage('ansible') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    script{
                      sh "sleep 150; cd ansible/ && ansible-playbook -i hosts.txt playbook_tomcat.yml"
                    }
                }
            }
        }
        /*stage('terraform destroy ') {
            steps {
                script{
                   sh """
                   sleep 300; \
                   terraform init; \
                   terraform destroy --auto-approve
                   """
                }
            }
        }*/
    }
}
